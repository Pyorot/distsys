=== PHASE CYCLES
<heartbeat> -> leader check -> send heartbeats -> <heartbeat>
		     v
		  return

<awaitElect> -> follow check -> election timeout eR-> <awaitElect>
                      V                 v
                   return          <candidate>

<callElect>
     v
candid check   > return
     V
request votes
     V
await votes eR > <follower>
     V
candid check   > return
     V
count votes    > <leader>
     v
<callElect>

=== PHASE STEPS
send heartbeats:
  send AppendEntry to all

election timeout:
  await eR or election timeout

request votes:
  send RequestVote to all

await votes:
  await votes until majority / everyone voted / eR

count votes:
  check majority

=== RPC steps
all RPCs: (tS = term sync, run immediately after receipt/ack'ment)
 - tS update: my term updated when other strictly dominates me
 - tS eR (election reset) = receipt && sender dominates receiver
 - tS react := sender dominates receiver
 - return immediately after timeout by default

AppendEntry:
 [nothing]

RequestVote:
 - vote if tS react && votedFor = nobody||same (update votedFor)
 - collect vote as per reply, and false if timeout